// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: metric_collector.proto

package metric_collector_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricCollectorClient is the client API for MetricCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricCollectorClient interface {
	ReceiveMetric(ctx context.Context, in *ReceiveMetricRequest, opts ...grpc.CallOption) (*ReceiveMetricResponse, error)
	ReceiveMetricBatch(ctx context.Context, in *ReceiveMetricBatchRequest, opts ...grpc.CallOption) (*ReceiveMetricResponse, error)
	ReadMetric(ctx context.Context, in *ReadMetricRequest, opts ...grpc.CallOption) (*ReadMetricResponse, error)
	ReadAllMetric(ctx context.Context, in *ReadAllMetricRequest, opts ...grpc.CallOption) (*ReadAllMetricResponse, error)
}

type metricCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricCollectorClient(cc grpc.ClientConnInterface) MetricCollectorClient {
	return &metricCollectorClient{cc}
}

func (c *metricCollectorClient) ReceiveMetric(ctx context.Context, in *ReceiveMetricRequest, opts ...grpc.CallOption) (*ReceiveMetricResponse, error) {
	out := new(ReceiveMetricResponse)
	err := c.cc.Invoke(ctx, "/metric_collector_grpc.MetricCollector/ReceiveMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricCollectorClient) ReceiveMetricBatch(ctx context.Context, in *ReceiveMetricBatchRequest, opts ...grpc.CallOption) (*ReceiveMetricResponse, error) {
	out := new(ReceiveMetricResponse)
	err := c.cc.Invoke(ctx, "/metric_collector_grpc.MetricCollector/ReceiveMetricBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricCollectorClient) ReadMetric(ctx context.Context, in *ReadMetricRequest, opts ...grpc.CallOption) (*ReadMetricResponse, error) {
	out := new(ReadMetricResponse)
	err := c.cc.Invoke(ctx, "/metric_collector_grpc.MetricCollector/ReadMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricCollectorClient) ReadAllMetric(ctx context.Context, in *ReadAllMetricRequest, opts ...grpc.CallOption) (*ReadAllMetricResponse, error) {
	out := new(ReadAllMetricResponse)
	err := c.cc.Invoke(ctx, "/metric_collector_grpc.MetricCollector/ReadAllMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricCollectorServer is the server API for MetricCollector service.
// All implementations must embed UnimplementedMetricCollectorServer
// for forward compatibility
type MetricCollectorServer interface {
	ReceiveMetric(context.Context, *ReceiveMetricRequest) (*ReceiveMetricResponse, error)
	ReceiveMetricBatch(context.Context, *ReceiveMetricBatchRequest) (*ReceiveMetricResponse, error)
	ReadMetric(context.Context, *ReadMetricRequest) (*ReadMetricResponse, error)
	ReadAllMetric(context.Context, *ReadAllMetricRequest) (*ReadAllMetricResponse, error)
	mustEmbedUnimplementedMetricCollectorServer()
}

// UnimplementedMetricCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedMetricCollectorServer struct {
}

func (UnimplementedMetricCollectorServer) ReceiveMetric(context.Context, *ReceiveMetricRequest) (*ReceiveMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMetric not implemented")
}
func (UnimplementedMetricCollectorServer) ReceiveMetricBatch(context.Context, *ReceiveMetricBatchRequest) (*ReceiveMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMetricBatch not implemented")
}
func (UnimplementedMetricCollectorServer) ReadMetric(context.Context, *ReadMetricRequest) (*ReadMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMetric not implemented")
}
func (UnimplementedMetricCollectorServer) ReadAllMetric(context.Context, *ReadAllMetricRequest) (*ReadAllMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllMetric not implemented")
}
func (UnimplementedMetricCollectorServer) mustEmbedUnimplementedMetricCollectorServer() {}

// UnsafeMetricCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricCollectorServer will
// result in compilation errors.
type UnsafeMetricCollectorServer interface {
	mustEmbedUnimplementedMetricCollectorServer()
}

func RegisterMetricCollectorServer(s grpc.ServiceRegistrar, srv MetricCollectorServer) {
	s.RegisterService(&MetricCollector_ServiceDesc, srv)
}

func _MetricCollector_ReceiveMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricCollectorServer).ReceiveMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric_collector_grpc.MetricCollector/ReceiveMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricCollectorServer).ReceiveMetric(ctx, req.(*ReceiveMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricCollector_ReceiveMetricBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveMetricBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricCollectorServer).ReceiveMetricBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric_collector_grpc.MetricCollector/ReceiveMetricBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricCollectorServer).ReceiveMetricBatch(ctx, req.(*ReceiveMetricBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricCollector_ReadMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricCollectorServer).ReadMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric_collector_grpc.MetricCollector/ReadMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricCollectorServer).ReadMetric(ctx, req.(*ReadMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricCollector_ReadAllMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricCollectorServer).ReadAllMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric_collector_grpc.MetricCollector/ReadAllMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricCollectorServer).ReadAllMetric(ctx, req.(*ReadAllMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricCollector_ServiceDesc is the grpc.ServiceDesc for MetricCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metric_collector_grpc.MetricCollector",
	HandlerType: (*MetricCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveMetric",
			Handler:    _MetricCollector_ReceiveMetric_Handler,
		},
		{
			MethodName: "ReceiveMetricBatch",
			Handler:    _MetricCollector_ReceiveMetricBatch_Handler,
		},
		{
			MethodName: "ReadMetric",
			Handler:    _MetricCollector_ReadMetric_Handler,
		},
		{
			MethodName: "ReadAllMetric",
			Handler:    _MetricCollector_ReadAllMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metric_collector.proto",
}
